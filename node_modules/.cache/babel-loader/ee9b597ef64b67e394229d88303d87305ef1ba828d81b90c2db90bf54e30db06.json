{"ast":null,"code":"import Ship from './Ship';\nconst SIZE = 10;\nclass Gameboard {\n  constructor() {\n    this.board = void 0;\n    this.missedShots = void 0;\n    this.board = [];\n    this.missedShots = [];\n    this.initialize();\n  }\n  initialize() {\n    for (let i = 0; i < SIZE; i++) {\n      this.board[i] = [];\n      this.missedShots[i] = [];\n      for (let j = 0; j < SIZE; j++) {\n        this.board[i][j] = null;\n        this.missedShots[i][j] = false;\n      }\n    }\n  }\n  placeShip(ship, row, column, isVertical) {\n    if (!this.isPlacementPossible(ship, row, column, isVertical)) return false;\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][column] = ship;\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][column + i] = ship;\n      }\n    }\n    return true;\n  }\n  placeShipsRandomly() {\n    if (!this.isEmpty()) return;\n    const ships = [];\n    const carrier = new Ship(5);\n    const battleship = new Ship(4);\n    const destroyer = new Ship(3);\n    const submarine = new Ship(3);\n    const patrolBoat = new Ship(2);\n    ships.push(carrier, battleship, destroyer, submarine, patrolBoat);\n    let succesfulPlacements = 0;\n    while (succesfulPlacements < 5) {\n      const row = Math.floor(Math.random() * 10);\n      const column = Math.floor(Math.random() * 10);\n      const isVertical = Math.floor(Math.random() * 2) === 1 ? true : false;\n      if (this.placeShip(ships[succesfulPlacements], row, column, isVertical)) succesfulPlacements++;\n    }\n  }\n  isPlacementPossible(ship, row, column, isVertical) {\n    // case position is out of gameboard\n    if (row < 0 || row > SIZE - 1 || column < 0 || column > SIZE - 1) return false;\n\n    // case ship doesn't fit in gameboard\n    if (isVertical) {\n      if (row + ship.length > SIZE) return false;\n    } else {\n      if (column + ship.length > SIZE) return false;\n    }\n\n    // case any of the fields is already taken\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][column]) return false;\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][column + i]) return false;\n      }\n    }\n\n    // case any of the neighbour fields are already taken\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        for (let x = -1; x <= 1; x++) {\n          for (let y = -1; y <= 1; y++) {\n            if (row + x + i < 0 || row + x + i >= SIZE || column + y < 0 || column + y >= SIZE) continue;\n            if (this.board[row + x + i][column + y]) return false;\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        for (let x = -1; x <= 1; x++) {\n          for (let y = -1; y <= 1; y++) {\n            if (row + x < 0 || row + x >= SIZE || column + y + i < 0 || column + y + i >= SIZE) continue;\n            if (this.board[row + x][column + y + i]) return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  receiveAttack(row, column) {\n    if (row < 0 || row >= SIZE || column < 0 || column >= SIZE) {\n      return false;\n    }\n    if (this.board[row][column]) {\n      let hitIndex = 0;\n      // is vertical\n      if (column > 0 && this.board[row][column - 1]) {\n        let i = 1;\n        while (column - i >= 0 && this.board[row][column - i]) {\n          hitIndex++;\n          i++;\n        }\n      }\n      // is horizontal\n      else if (row > 0 && this.board[row - 1][column]) {\n        let i = 1;\n        while (row - i >= 0 && this.board[row - i][column]) {\n          hitIndex++;\n          i++;\n        }\n      }\n      this.board[row][column].hit(hitIndex);\n      return true;\n    } else {\n      this.missedShots[row][column] = true;\n      return false;\n    }\n  }\n  isGameOver() {\n    let isBoardEmpty = true;\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j]) {\n          isBoardEmpty = false;\n          if (!this.board[i][j].isSunk()) {\n            return false;\n          }\n        }\n      }\n    }\n    return isBoardEmpty ? false : true;\n  }\n  isEmpty() {\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j] !== null) return false;\n      }\n    }\n    return true;\n  }\n  getEmptyFieldsAmount() {\n    let result = 0;\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j] === null) result++;\n      }\n    }\n    return result;\n  }\n}\nexport default Gameboard;","map":{"version":3,"names":["Ship","SIZE","Gameboard","constructor","board","missedShots","initialize","i","j","placeShip","ship","row","column","isVertical","isPlacementPossible","length","placeShipsRandomly","isEmpty","ships","carrier","battleship","destroyer","submarine","patrolBoat","push","succesfulPlacements","Math","floor","random","x","y","receiveAttack","hitIndex","hit","isGameOver","isBoardEmpty","isSunk","getEmptyFieldsAmount","result"],"sources":["/home/thomas/Documents/battleship-main/src/factories/Gameboard.ts"],"sourcesContent":["import Ship from './Ship'\n\nconst SIZE = 10\n\nclass Gameboard {\n  board: Ship[][]\n  missedShots: boolean[][]\n\n  constructor() {\n    this.board = []\n    this.missedShots = []\n    this.initialize()\n  }\n\n  initialize() {\n    for (let i = 0; i < SIZE; i++) {\n      this.board[i] = []\n      this.missedShots[i] = []\n      for (let j = 0; j < SIZE; j++) {\n        this.board[i][j] = null\n        this.missedShots[i][j] = false\n      }\n    }\n  }\n\n  placeShip(ship: Ship, row: number, column: number, isVertical: boolean) {\n    if (!this.isPlacementPossible(ship, row, column, isVertical)) return false\n\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][column] = ship\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][column + i] = ship\n      }\n    }\n    return true\n  }\n\n  placeShipsRandomly() {\n    if (!this.isEmpty()) return\n\n    const ships = []\n    const carrier = new Ship(5)\n    const battleship = new Ship(4)\n    const destroyer = new Ship(3)\n    const submarine = new Ship(3)\n    const patrolBoat = new Ship(2)\n    ships.push(carrier, battleship, destroyer, submarine, patrolBoat)\n\n    let succesfulPlacements = 0\n\n    while (succesfulPlacements < 5) {\n      const row = Math.floor(Math.random() * 10)\n      const column = Math.floor(Math.random() * 10)\n      const isVertical = Math.floor(Math.random() * 2) === 1 ? true : false\n\n      if (this.placeShip(ships[succesfulPlacements], row, column, isVertical))\n        succesfulPlacements++\n    }\n  }\n\n  isPlacementPossible(\n    ship: Ship,\n    row: number,\n    column: number,\n    isVertical: boolean\n  ) {\n    // case position is out of gameboard\n    if (row < 0 || row > SIZE - 1 || column < 0 || column > SIZE - 1)\n      return false\n\n    // case ship doesn't fit in gameboard\n    if (isVertical) {\n      if (row + ship.length > SIZE) return false\n    } else {\n      if (column + ship.length > SIZE) return false\n    }\n\n    // case any of the fields is already taken\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][column]) return false\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][column + i]) return false\n      }\n    }\n\n    // case any of the neighbour fields are already taken\n    if (isVertical) {\n      for (let i = 0; i < ship.length; i++) {\n        for (let x = -1; x <= 1; x++) {\n          for (let y = -1; y <= 1; y++) {\n            if (\n              row + x + i < 0 ||\n              row + x + i >= SIZE ||\n              column + y < 0 ||\n              column + y >= SIZE\n            )\n              continue\n            if (this.board[row + x + i][column + y]) return false\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        for (let x = -1; x <= 1; x++) {\n          for (let y = -1; y <= 1; y++) {\n            if (\n              row + x < 0 ||\n              row + x >= SIZE ||\n              column + y + i < 0 ||\n              column + y + i >= SIZE\n            )\n              continue\n            if (this.board[row + x][column + y + i]) return false\n          }\n        }\n      }\n    }\n    return true\n  }\n\n  receiveAttack(row: number, column: number) {\n    if (row < 0 || row >= SIZE || column < 0 || column >= SIZE) {\n      return false\n    }\n\n    if (this.board[row][column]) {\n      let hitIndex = 0\n      // is vertical\n      if (column > 0 && this.board[row][column - 1]) {\n        let i = 1\n        while (column - i >= 0 && this.board[row][column - i]) {\n          hitIndex++\n          i++\n        }\n      }\n      // is horizontal\n      else if (row > 0 && this.board[row - 1][column]) {\n        let i = 1\n        while (row - i >= 0 && this.board[row - i][column]) {\n          hitIndex++\n          i++\n        }\n      }\n      this.board[row][column].hit(hitIndex)\n      return true\n    } else {\n      this.missedShots[row][column] = true\n      return false\n    }\n  }\n\n  isGameOver() {\n    let isBoardEmpty = true\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j]) {\n          isBoardEmpty = false\n          if (!this.board[i][j].isSunk()) {\n            return false\n          }\n        }\n      }\n    }\n    return isBoardEmpty ? false : true\n  }\n\n  isEmpty() {\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j] !== null) return false\n      }\n    }\n    return true\n  }\n\n  getEmptyFieldsAmount() {\n    let result = 0\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (this.board[i][j] === null) result++\n      }\n    }\n    return result\n  }\n}\n\nexport default Gameboard\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}